#include <iostream>
#include <sstream>
#include <cmath>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <deque>

#include <ilcplex/ilocplex.h>
#include <ilconcert/ilocsvreader.h>
#include <ilconcert/iloexpression.h>

#include "BBNode.h"

using namespace std;

class job {
public:
	IloNum s;
	IloNum p;
	IloNum d;
	bool operator<(const job &a, const job &b) {return a.d < b.d;}
};

vector<job> getSortedJobs(IloEnv env, string datafilename, int nj) {
	stringstream filename;
	if(datafilename.length() > 0) {
		filename << datafilename;
	} else {
		filename << "../../data/data_" << nj;
	}
	cout << "Loading file: " << filename.str() << endl;
	IloCsvReader csvr(env, filename.str().c_str());

    if(csvr.getNumberOfItems()-1 != nj) {
      cout << "Error: Expected " << nj << " jobs, but found " << csvr.getNumberOfItems() << " in CSV file. Aborting.\n";
      exit(0);
    }

    vector<job> jc; // this structure is necessary to sort the jobs.

    IloCsvLine curLine;
    for(int j=0; j<nj; j++) {
      curLine = csvr.getLineByNumber(j+1);
      job jobLine;
      jobLine.s = curLine.getIntByPosition(0);
      jobLine.p = curLine.getIntByPosition(1);
      jobLine.d = curLine.getIntByPosition(2);
      jc.push_back(jobLine);
    }

    // sort the jobs by non-decreasing due date
    sort(jc.begin(), jc.end());
    return jc;
}

int main(int argc, char *argv[]) {

	// define Ilog stuff

	IloEnv env;

	// read in job lists
	int nj, nk;
	string datafilename;

    if(argc >= 2) {
      nj = atoi(argv[1]);
      nk = nj;
    } else {
      nj = 10;
    }

    if(argc >= 3 && !strcmp(argv[2], "v")) {
      //  verboseoutput=true;
    }

    if(argc >= 4) {
      datafilename = argv[3];
    }

    vector<job> jc = getSortedJobs(env, datafilename, nj);
    IloNumArray sj(env, nj), pj(env, nj), dj(env, nj);
    for(int j=0; j<nj; j++) {
    	sj[j] = jc[j]

    }
	// create heuristic solution to find a bound on Lmax

	// create root node
	vector<BBNode> a;
	// let root node create children

	// track solving progress

	// get and print solution

	cout << "We're done here. Thanks." << endl;
	return 0;
}
