var bool: REIF____1::var_is_introduced::is_defined_var;

var bool: REIF____10::var_is_introduced::is_defined_var;

var bool: REIF____11::var_is_introduced::is_defined_var;

var bool: REIF____12::var_is_introduced::is_defined_var;

var bool: REIF____13::var_is_introduced::is_defined_var;

var bool: REIF____14::var_is_introduced::is_defined_var;

var bool: REIF____2::var_is_introduced::is_defined_var;

var bool: REIF____3::var_is_introduced::is_defined_var;

var bool: REIF____4::var_is_introduced::is_defined_var;

var bool: REIF____5::var_is_introduced::is_defined_var;

var bool: REIF____6::var_is_introduced::is_defined_var;

var bool: REIF____7::var_is_introduced::is_defined_var;

var bool: REIF____8::var_is_introduced::is_defined_var;

var bool: REIF____9::var_is_introduced::is_defined_var;

int: m = 6;

int: n = 5;

array[1 .. 36] of var 0 .. 5: t::output_array([ 1 .. 6, 0 .. 5 ]);

constraint int_ne(t[2], t[3]);

constraint int_ne(t[2], t[4]);

constraint int_ne(t[2], t[5]);

constraint int_ne(t[1], t[2]);

constraint int_ne(t[2], 0);

constraint int_ne(t[7], t[2]);

constraint int_ne(t[3], t[4]);

constraint int_ne(t[3], t[5]);

constraint int_ne(t[1], t[3]);

constraint int_ne(t[3], 0);

constraint int_ne(t[7], t[3]);

constraint int_ne(t[1], t[4]);

constraint int_ne(t[4], 0);

constraint int_ne(t[7], t[4]);

constraint int_ne(t[4], t[5]);

constraint int_ne(t[1], t[5]);

constraint int_ne(t[5], 0);

constraint int_ne(t[7], t[5]);

constraint int_eq(t[6], 0);

constraint int_ne(t[1], 0);

constraint int_ne(t[7], 0);

constraint int_le(t[8], 1);

constraint int_le(0, t[8]);

constraint int_le(t[9], 1);

constraint int_le(0, t[9]);

constraint int_le(t[10], 1);

constraint int_le(0, t[10]);

constraint int_le(t[11], 1);

constraint int_le(0, t[11]);

constraint int_le(t[12], 1);

constraint int_le(0, t[12]);

constraint 
  int_lin_eq(
    [ 1, -1, -1, -1, -1, -1 ], [ t[7], t[8], t[9], t[10], t[11], t[12] ], 0);

constraint 
  int_lin_eq(
    [ -1, -1, -1, -1, -1, 1 ], [ t[8], t[9], t[10], t[11], t[12], t[13] ], 
    0);

constraint int_ne(t[7], 0);

constraint int_ne(t[13], 0);

constraint int_le(t[14], t[15]);

constraint int_le(t[15], t[16]);

constraint int_le(t[16], t[17]);

constraint int_le(t[17], t[18]);

constraint int_le(t[13], t[14]);

constraint int_le(t[18], t[19]);

constraint int_ge(t[13], t[19]);

constraint int_ne(t[13], 0);

constraint int_ne(t[19], 0);

constraint array_bool_or([ REIF____10, REIF____11, REIF____14 ], true);

constraint 
  bool_and(REIF____12, REIF____13, REIF____14)::defines_var(REIF____14);

constraint int_le_reif(t[19], t[25], REIF____13)::defines_var(REIF____13);

constraint int_ge_reif(t[19], t[25], REIF____12)::defines_var(REIF____12);

constraint int_eq_reif(t[19], t[25], REIF____11)::defines_var(REIF____11);

constraint 
  array_bool_and(
    [ REIF____1, REIF____2, REIF____4, REIF____5, REIF____6, REIF____7, 
      REIF____8, REIF____9 ], REIF____10)::defines_var(REIF____10);

constraint int_eq_reif(t[20], 0, REIF____9)::defines_var(REIF____9);

constraint int_eq_reif(t[21], 0, REIF____8)::defines_var(REIF____8);

constraint int_eq_reif(t[22], 0, REIF____7)::defines_var(REIF____7);

constraint int_eq_reif(t[23], 0, REIF____6)::defines_var(REIF____6);

constraint int_eq_reif(t[24], 0, REIF____5)::defines_var(REIF____5);

constraint bool_not(REIF____3, REIF____4)::defines_var(REIF____4);

constraint int_ne_reif(t[19], t[25], REIF____3)::defines_var(REIF____3);

constraint int_ne_reif(t[19], 0, REIF____2)::defines_var(REIF____2);

constraint int_ne_reif(t[25], 0, REIF____1)::defines_var(REIF____1);

constraint int_ne(t[26], t[27]);

constraint int_ne(t[26], t[28]);

constraint int_ne(t[26], t[29]);

constraint int_ne(t[25], t[26]);

constraint int_ne(t[26], 0);

constraint int_ne(t[31], t[26]);

constraint int_ne(t[27], t[28]);

constraint int_ne(t[27], t[29]);

constraint int_ne(t[25], t[27]);

constraint int_ne(t[27], 0);

constraint int_ne(t[31], t[27]);

constraint int_ne(t[25], t[28]);

constraint int_ne(t[28], 0);

constraint int_ne(t[31], t[28]);

constraint int_ne(t[28], t[29]);

constraint int_ne(t[25], t[29]);

constraint int_ne(t[29], 0);

constraint int_ne(t[31], t[29]);

constraint int_eq(t[30], 0);

constraint int_ne(t[25], 0);

constraint int_ne(t[31], 0);

constraint int_ne(t[1], t[31]);

solve 
  ::int_search(
    [ t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], 
      t[12], t[13], t[14], t[15], t[16], t[17], t[18], t[19], t[20], t[21], 
      t[22], t[23], t[24], t[25], t[26], t[27], t[28], t[29], t[30], t[31], 
      t[32], t[33], t[34], t[35], t[36] ], input_order, indomain_min, 
    complete) satisfy;
