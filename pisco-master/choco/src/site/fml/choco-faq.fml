<?xml version="1.0"?>
<faqs title="Frequently Asked Question about CHOCO">

    <part id="faq">
        <faq id="where">
            <question>Where can I download CHOCO?</question>
            <answer>
                <p>
                    Please refer to the
                    <a href="./choco-download.html">download page</a>
                    to get the latest version of CHOCO.
                </p>
            </answer>
        </faq>

        <faq id="java-version">
            <question>What is the required Java version to run CHOCO?</question>
            <answer>
                <p>CHOCO 2.0 or latest requires at least<a href="http://java.sun.com/javase/6/">Java 6</a>.
                </p>
                <p>
                    If you are working on Mac OS X 10.4 Tiger or if you do not have an Intel processor, you probably can
                    not install java 6 on your OS.
                    Please, take a look at<a href="http://landonf.bikemonkey.org/static/soylatte/">Soy Latte</a>, which
                    goals are “support for Java 6 Development on Mac OS X 10.4 and 10.5,
                    OpenJDK support for Java 7 on Mac OS X and On-time release of Java 7 for Mac OS X”.
                </p>
            </answer>
        </faq>

        <faq id="choco-jar">
            <question>How do I add CHOCO to my project?</question>
            <answer>
                <p>You just need to add the latest version of CHOCO to your classpath.
                </p>
                <p>
                    <b>Intellij IDEA</b>
                    <ul>
                        <li>Go to "File/Settings"</li>
                        <li>Select "Project Settings</li>
                        <li>Click on "Librairies", then on [+]</li>
                        <li>Enter "CHOCO" as the name of the library, and "OK"</li>
                        <li>Choose your project and "OK"</li>
                        <li>Click on "Attach Jar Directories" and select the directory that contains Choco-x.x.x.jar
                        </li>
                    </ul>
                </p>
                <p>
                    <b>Eclipse</b>
                    <ul>
                        <li>Go to "Project/Properties"</li>
                        <li>Select "Jave Build Path" on the left menu</li>
                        <li>On the right panel, select "Librairies"</li>
                        <li>Click on "Add Externals JARs..." button</li>
                        <li>Select Choco-x.x.x.jar file</li>
                    </ul>
                </p>
            </answer>
        </faq>

        <faq id="see-choco">
            <question>I can not see APIs of CHOCO!</question>
            <answer>
                <p>Add the following code to your class, to see the APIs:
                </p>
                <code>import static choco.Choco.*;</code>
            </answer>
        </faq>

        <faq id="value-variable">
            <question>How do I get the value of variables through the solver?</question>
            <answer>
                <p>
                    There are two different kinds of variables: those associated with the Model (like IntegerVariable,
                    SetVariable,…)
                    and those associated with the Solver (like IntDomainVar, SetVar,…).
                    The second type is a Solver interpretation of the first one (which is only declarative).
                    After having defined your model with variables and constraints, it has to be read by the Solver.
                    After that, a Solver object is created. You can access the Variable Model value through the Solver
                    using the
                    following method of the Solver:
                </p>
                <code>solver.getVar(Variable v);</code>
                <br/>
                <p>
                    where v is a Model variable (or an array of Model variables) and it returns a Solver variable.
                </p>
            </answer>
        </faq>

        <faq id="constant-value">
            <question>How do I use constante value inside constraint?</question>
            <answer>
                <p>
                    Some constraints doesn't provide API with java object (like int, double or Integer).
                    You can define constant variable (ie, variable with one unique value) liek this:
                </p>
                <code>
                    IntegerVariable one = constant(1);
                    <br/>
                    RealVariable one = constant(1.0);
                    <br/>
                </code>
                <p>
                    And, you can use this variable inside the constraint:
                </p>
                <code>
                    Model m = new CPModel();
                    <br/>
                    <br/>
                    IntegerVariable x = makeIntVar("x", 0, 10);
                    <br/>
                    IntegerVariable two = constant(2);
                    <br/>
                    IntegerVariable maximum = makeIntVar("max", 0, 15);
                    <br/>
                    <br/>
                    m.addConstraint(eq(maximum, max(x, two));
                    <br/>
                    //...
                </code>
                <p>
                    Do not forget that some constraints provide api with java object.
                </p>
            </answer>
        </faq>

        <faq id="csp">
            <question>How can I use Choco to solve CSP'08 benchmark?</question>
            <answer>
                <p>
                    You can easily load an XML file of the CSP'08 competition and solve it with CHOCO.
                    To load the file, we use the XMLParser available
                    <a href="http://www.cril.univ-artois.fr/~lecoutre/research/tools/tools.html" target="_blank">
                        here</a>:
                </p>
                <code>
                    String fileName = "../../ProblemsData/CSPCompet/intension/nonregres/graph1.xml";
                    <br/>
                    File instance = new File(fileName);
                    <br/>
                    XmlModel xs = new XmlModel(); // A class to provide facilities for loading and solving CSP'08 xml
                    file
                    <br/>
                    InstanceParser parser = xs.load(instance); // loading of the CPS'08 xml file
                </code>
                <p>
                    Once the file has been loaded, a Model object is build from the InstanceParser object:
                </p>
                <code>
                    CPModel model = xs.buildModel(parser); // Creation of the model
                </code>
                <p>
                    At this point, you can choose to solve this model with a pre-processing step.
                    The pre-processing step analyzes variables and constraints, makes some specific choices to improve
                    the resolution.
                    Concerning variables, it analyzes domains and constraints and choose what seems to be the best kind
                    of domain
                    (for example, enumerated or bounded domain), or add one variable where large number of variables are
                    equals, ...
                    Concerning constraints, it detects clique of differences or disjunctions and state the corresponding
                    global constraints,
                    breaks symetries, detects distance… Then, it can also choose the search strategy. To do this, use
                    the following code:
                </p>
                <code>
                    PreProcessCPSolver s = xs.solve(model); // Build a BlackBoxSolver and solve it.
                </code>
                <p>
                    Finally, you can print informations concerning the resolution:
                </p>
                <code>
                    xs.postAnalyze(instance, parser, s);
                </code>
                <p>
                    You can easily solve benchmarks of CSP'08 competition, or with your own problem modelize in
                    <a href="http://www.cril.univ-artois.fr/CPAI08/XCSP2_1.pdf" target="_blank">CSP'08 xml format</a>.
                </p>
            </answer>
        </faq>

        <faq id="error1">
            <question>Why do I have a error when I add my constraint?</question>
            <answer>
                <p>
                    If you have a error message like this:
                </p>
                <code>
                    Component class could not be found: my.package.and.my.Constraint.ConstraintManager
                </code>
                <p>
                    and if the ConstraintManager is an inner class of your constraint, you must define the name in the
                    component name like this:
                </p>
                <code>
                    my.package.and.my.Constraint$ConstraintManager
                </code>
                <p>
                    For more details, see the documentation.
                </p>
            </answer>
        </faq>

        <faq id="bounds">
            <question>Are bounds with positive and negative infinity supported within CHOCO?</question>
            <answer>
                <p>
                    Integer or Double bounds are not really appreciate in CHOCO.
                    Because, during propgation, a basic test is done on bounds and the following operation can be
                    applied: “upper bound +1”.
                    Integer.MAX_VALUE+1 is equal to …Integer.MIN_VALUE, and it corrupts the propagation.
                    If you really want to have a large domain, a division with 10 should be sufficient:
                </p>
                <p>
                    <code>
                        IntegerVariable v1 = makeIntVar("v1", Integer.MIN_VALUE/10, Integer.MIN_VALUE/10);
                        <br/>
                        // equivalent to:
                        <br/>
                        IntegerVariable v1 = makeIntVar("v1");
                    </code>
                </p>
                <p>
                    <code>
                        RealVariable a1 = makeRealVar("A1", Double.NEGATIVE_INFINITY/10, Double.POSITIVE_INFINITY/10);
                        <br/>
                    </code>
                </p>
            </answer>
        </faq>

        <faq id="maven">
            <question>How do I install CHOCO using Maven?</question>
            <answer>
                <p>
                    Once you obtained the latest sources, there are a few steps you can do to deal with those.
                    <i>It is assumed that you already set up Maven on your local system.
                        If you did not, then please refer to
                        <a href="http://maven.apache.org/download.html" target="_blank">Maven's Download and
                            Installation Instructions
                        </a>
                        before continuing.
                    </i>
                    Go to the CHOCO directory.
                </p>
                <ul>
                    <li>To install CHOCO, run the maven command:</li>
                    <code>
                        mvn clean install -Dmaven.test.skip=true
                    </code>
                    <li>To build the project for your IDE:</li>
                    <ul>
                        <li>Intellij IDEA (CHOCO's favourite IDE):</li>
                        <code>
                            mvn idea:idea
                        </code>
                        <li>Eclipse:</li>
                        <code>
                            mvn eclipse:eclipse
                        </code>
                    </ul>
                    <li>To build the differents JAR files of CHOCO:</li>
                    <ul>
                        <li>Basic content (choco-kernel + choco-cp and dependencies):</li>
                        <code>
                            mvn clean package assembly:assembly -Ddescriptor=./src/descriptors/basic.xml
                        </code>
                        <li>Basic content and visu (choco-kernel + choco-cp + choco-visu and dependencies):</li>
                        <code>
                            mvn clean package assembly:assembly -Ddescriptor=./src/descriptors/basic+visu.xml
                        </code>
                        <li>Beta content (choco-kernel + choco-cp + choco-visu + choco-contribs and dependencies):</li>
                        <code>
                            mvn clean package assembly:assembly -Ddescriptor=./src/descriptors/beta.xml
                        </code>
                    </ul>
                </ul>
                <p>
                    Please refer to
                    <a href="http://maven.apache.org/plugins/maven-assembly-plugin/" target="_blank">Assembly plugin web
                        site
                    </a>
                    for further information.
                    <br/>
                </p>
                <p>
                    Please refer to the
                    <a href="http://maven.apache.org/" target="_blank">Maven web site</a>
                    for other life cycle command.
                </p>
            </answer>
        </faq>

        <faq id="eclipse_source">
            <question>I'm working with the sources in Eclipse environment, and I get "new
                sun.security.action.GetPropertyAction("line.separator"));" error
            </question>
            <answer>
                <p>
                    You have to define an
                    <i>access rule</i>
                    to allow the access of the constructor GetPropertyAction(String) to Eclipse.
                </p>
                <ul>
                    <li>Go into<b>Project/Properties/Java build path</b>, on the
                        <b>Librairies</b>
                        tab
                    </li>
                    <li>Select your JRE and left-clic on
                        <b>Access rules</b>
                    </li>
                    <li>Edit this entry to set
                        <i>sun.security.action</i>
                        accessible
                    </li>
                </ul>
            </answer>
        </faq>
    </part>
</faqs>

