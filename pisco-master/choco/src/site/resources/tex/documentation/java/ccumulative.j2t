        CPModel m = new CPModel();
        // data
        int n = 11 + 3; //number of tasks (include the three fake tasks)
        int[] heights_data = new int[]{2, 1, 4, 2, 3, 1, 5, 6, 2, 1, 3, 1, 1, 2};
        int[] durations_data = new int[]{1, 1, 1, 2, 1, 3, 1, 1, 3, 4, 2, 3, 1, 1};
        // variables
        IntegerVariable capa = constant(7);
        IntegerVariable[] starts = makeIntVarArray("start", n, 0, 5, Options.V_BOUND);
        IntegerVariable[] ends = makeIntVarArray("end", n, 0, 6, Options.V_BOUND);
        IntegerVariable[] duration = new IntegerVariable[n];
        IntegerVariable[] height = new IntegerVariable[n];
        for (int i = 0; i < height.length; i++) {
            duration[i] = constant(durations_data[i]);
            height[i] = makeIntVar("height " + i, new int[]{0, heights_data[i]});
        }
        TaskVariable[] tasks = Choco.makeTaskVarArray("Task", starts, ends, duration);

        IntegerVariable[] bool = makeIntVarArray("taskIn?", n, 0, 1);
        IntegerVariable obj = makeIntVar("obj", 0, n, Options.V_BOUND, Options.V_OBJECTIVE);
        //post the cumulative
        m.addConstraint(cumulative("cumulative", tasks, height, constant(0), capa,
                Options.C_CUMUL_TI));
        //post the channeling to know if the task is scheduled or not
        for (int i = 0; i < n; i++) {
            m.addConstraint(boolChanneling(bool[i], height[i], heights_data[i]));
        }
        //state the objective function
        m.addConstraint(eq(sum(bool), obj));
        CPSolver s = new CPSolver();
        s.read(m);
        //set the fake tasks to establish the profile capacity of the ressource
        try {
            s.getVar(starts[0]).setVal(1);
            s.getVar(ends[0]).setVal(2);
            s.getVar(height[0]).setVal(2);
            s.getVar(starts[1]).setVal(2);
            s.getVar(ends[1]).setVal(3);
            s.getVar(height[1]).setVal(1);
            s.getVar(starts[2]).setVal(3);
            s.getVar(ends[2]).setVal(4);
            s.getVar(height[2]).setVal(4);
        } catch (ContradictionException e) {
            System.out.println("error, no contradiction expected at this stage");
        }
        // maximize the number of tasks placed in this profile
        s.maximize(s.getVar(obj), false);
        System.out.println("Objective : " + (s.getVar(obj).getVal() - 3));
        for (int i = 3; i < starts.length; i++) {
            if (s.getVar(height[i]).getVal() != 0)
                System.out.println("[" + s.getVar(starts[i]).getVal() + " - "
                        + (s.getVar(ends[i]).getVal() - 1) + "]:"
                        + s.getVar(height[i]).getVal());
        }
