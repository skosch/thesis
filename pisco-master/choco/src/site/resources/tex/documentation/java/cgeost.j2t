        Model m = new CPModel();
        int dim = 3;
        int lengths[] = {5, 3, 2};
        int widths[] = {2, 2, 1};
        int heights[] = {1, 1, 1};
        int nbOfObj = 3;
        long seed = 0;
        //Create the Objects
        List<GeostObject> obj = new ArrayList<GeostObject>();
        for (int i = 0; i < nbOfObj; i++) {
            IntegerVariable shapeId = Choco.makeIntVar("sid", i, i);
            IntegerVariable coords[] = new IntegerVariable[dim];
            for (int j = 0; j < coords.length; j++) {
                coords[j] = Choco.makeIntVar("x" + j, 0, 2);
            }
            IntegerVariable start = Choco.makeIntVar("start", 1, 1);
            IntegerVariable duration = Choco.makeIntVar("duration", 1, 1);
            IntegerVariable end = Choco.makeIntVar("end", 1, 1);
            obj.add(new GeostObject(dim, i, shapeId, coords, start, duration, end));
        }
        //Create the ShiftedBoxes and add them to corresponding shapes
        List<ShiftedBox> sb = new ArrayList<ShiftedBox>();
        int[] t = {0, 0, 0};
        for (int d = 0; d < nbOfObj; d++) {
            int[] l = {lengths[d], heights[d], widths[d]};
            sb.add(new ShiftedBox(d, t, l));
        }
        //Create the external constraints vector
        List<IExternalConstraint> ectr = new ArrayList<IExternalConstraint>();
        //create the list of dimensions for the external constraint
        int[] ectrDim = new int[dim];
        for (int d = 0; d < dim; d++)
            ectrDim[d] = d;
        //create the list of object ids for the external constraint
        int[] objOfEctr = new int[nbOfObj];
        for (int d = 0; d < nbOfObj; d++) {
            objOfEctr[d] = obj.get(d).getObjectId();
        }
        //create and add one external constraint of type non overlapping
        NonOverlappingModel n = new NonOverlappingModel(Constants.NON_OVERLAPPING, ectrDim, objOfEctr);
        ectr.add(n);
        //create and post the geost constraint
        Constraint geost = Choco.geost(dim, obj, sb, ectr);
        m.addConstraint(geost);
        Solver s = new CPSolver();
        s.read(m);
        s.setValIntSelector(new RandomIntValSelector(seed));
        s.setVarIntSelector(new RandomIntVarSelector(s, seed));
        s.solveAll();
