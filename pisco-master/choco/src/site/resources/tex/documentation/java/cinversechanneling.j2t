        int n = 8;
        Model m = new CPModel();
        IntegerVariable[] queenInCol = new IntegerVariable[n];
        IntegerVariable[] queenInRow = new IntegerVariable[n];
        for (int i = 0; i < n; i++) {
            queenInCol[i] = makeIntVar("QC" + i, 1, n);
            queenInRow[i] = makeIntVar("QR" + i, 1, n);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
               int k = j - i;
                m.addConstraint(neq(queenInCol[i], queenInCol[j]));           // row
                m.addConstraint(neq(queenInCol[i], plus(queenInCol[j], k)));  // diagonal 1
                m.addConstraint(neq(queenInCol[i], minus(queenInCol[j], k))); // diagonal 2
                m.addConstraint(neq(queenInRow[i], queenInRow[j]));           // column
                m.addConstraint(neq(queenInRow[i], plus(queenInRow[j], k)));  // diagonal 2
                m.addConstraint(neq(queenInRow[i], minus(queenInRow[j], k))); // diagonal 1
            }
        }
        m.addConstraint(inverseChanneling(queenInCol, queenInRow));
        Solver s = new CPSolver();
        s.read(m);
        s.solveAll();
