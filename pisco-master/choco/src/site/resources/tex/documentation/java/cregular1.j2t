        //1- Create the model
        Model m = new CPModel();
        int n = 6;
        IntegerVariable[] vars = new IntegerVariable[n];
        for (int i = 0; i < vars.length; i++) {
            vars[i] = makeIntVar("v" + i, 0, 5);
        }
        //2- Build the list of transitions of the DFA
        List<Transition> t = new LinkedList<Transition>();
        t.add(new Transition(0, 1, 1));
        t.add(new Transition(1, 1, 2));
        // transition with label 1 from state 2 to state 3
        t.add(new Transition(2, 1, 3));
        t.add(new Transition(3, 3, 0));
        t.add(new Transition(0, 3, 0));
        //3- Two final states: 0, 3
        List<Integer> fs = new LinkedList<Integer>();
        fs.add(0); fs.add(3);
        //4- Build the DFA
        DFA auto = new DFA(t, fs, n);
        //5- add the constraint
        m.addConstraint(regular(vars, auto));
        //6- create the solver, read the model and solve it
        Solver s = new CPSolver();
        s.read(m);
        s.solve();
        do {
            for (int i = 0; i < n; i++)
            System.out.print(s.getVar(vars[i]).getVal());
            System.out.println("");
        } while (s.nextSolution());
        //7- Print the number of solution found
        System.out.println("Nb_sol : " + s.getNbSolutions());
