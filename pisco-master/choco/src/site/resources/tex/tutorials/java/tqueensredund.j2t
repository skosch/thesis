        int n = 12;
        Model m = new CPModel();

        IntegerVariable[] queens = new IntegerVariable[n];
        IntegerVariable[] queensdual = new IntegerVariable[n];
        for (int i = 0; i < n; i++) {
            queens[i] = Choco.makeIntVar("Q" + i, 1, n, Options.V_ENUM);
            queensdual[i] = Choco.makeIntVar("QD" + i, 1, n, Options.V_ENUM);
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int k = j - i;
                m.addConstraint(Choco.neq(queens[i], queens[j]));
                m.addConstraint(Choco.neq(queens[i], Choco.plus(queens[j], k)));  // diagonal
                m.addConstraint(Choco.neq(queens[i], Choco.minus(queens[j], k))); // diagonal
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int k = j - i;
                m.addConstraint(Choco.neq(queensdual[i], queensdual[j]));
                m.addConstraint(Choco.neq(queensdual[i], Choco.plus(queensdual[j], k)));  // diagonal
                m.addConstraint(Choco.neq(queensdual[i], Choco.minus(queensdual[j], k))); // diagonal
            }
        }
        m.addConstraint(Choco.inverseChanneling(queens, queensdual));

        Solver s = new CPSolver();
        s.read(m);

        s.addGoal(new AssignOrForbidIntVarVal(new MinDomain(s, s.getVar(queens)), new MinVal()));

        ChocoLogging.toSolution();
        s.solve();
