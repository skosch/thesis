        int n = 9;
        // Build model
        Model m = new CPModel();
        // Declare variables
        IntegerVariable[][] rows = Choco.makeIntVarArray("rows", n, n, 1, n, Options.V_ENUM);
        IntegerVariable[][] cols = new IntegerVariable[n][n];

        // Channeling between rows and columns
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                cols[i][j] = rows[j][i];
        }

        // Add alldifferent constraint
        for (int i = 0; i < n; i++) {
            m.addConstraint(Choco.allDifferent(cols[i]));
            m.addConstraint(Choco.allDifferent(rows[i]));
        }

        // Define sub regions
        IntegerVariable[][] carres = new IntegerVariable[n][n];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    carres[j + k * 3][i] = rows[0 + k * 3][i + j * 3];
                    carres[j + k * 3][i + 3] = rows[1 + k * 3][i + j * 3];
                    carres[j + k * 3][i + 6] = rows[2 + k * 3][i + j * 3];
                }
            }
        }

        // Add alldifferent on sub regions
        for (int i = 0; i < n; i++) {
            Constraint c = Choco.allDifferent(carres[i]);
            m.addConstraint(c);
        }

        // Call solver
        Solver s = new CPSolver();
        s.read(m);
        ChocoLogging.toSolution();
        s.solve();
        // print grid
