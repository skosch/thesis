	/* new vertical constraint
	IloArray<IloBoolVarArray> j_toolongfor_k(env,nj);
	for(int j=0; j<nj; j++) {
		j_toolongfor_k[j] = IloBoolVarArray(env,nj);
		for(int k=0; k<j; k++) {
			j_toolongfor_k[j][k] = IloBoolVar(env);
			if(sj[k] + sj[j] - 1 >= capacity) continue;
			IloNumExpr sizeInK(env);
			for(int i=k; i<nj; i++) sizeInK += sj[i] * xjh[i][k];
			//mip_cj.add( j_toolongfor_k[j][k] >= (pj[j] - Pk[k])/IloMax(pj) - 0.5/IloMax(pj) );
			//mip_cj.add( j_toolongfor_k[j][k] <= (pj[j] - Pk[k])/IloMax(pj) - 0.5/IloMax(pj) + 1.0);
			//mip_cj.add(  capacity * (0 + IloSum(xjh[j]) + IloSum(xjh[k])) + 0.5 >= capacity-( sj[k] + sizeInK ) - sj[j] );
			mip_cj.add(IloIfThen(env, Pk[k]-IloInfinity >= pj[j], j_toolongfor_k[j][k]==0));

		}
	}
*/
/*
	for(int j=0; j<nj; j++) {
		for(int k=0; k<nj; k++) {
			if(sj[k] + sj[j] - 1 >= capacity) continue;
			IloNumExpr sizeInK(env);
			for(int i=k; i<nj; i++) sizeInK += sj[i] * xjh[i][k];
			mip_cj_solver.addLazyConstraint(IloRange(env, capacity- sj[k] - sj[j], sizeInK + capacity * (j_toolongfor_k[j][k] + IloSum(xjh[j]) + IloSum(xjh[k])) + 0.5, IloInfinity));
		}
	} */

	/*/ vertical constraint (if a job fits lengthwise better than another job and is single, it can't fit sizewise.)
	for(int k=0; k<nj-1; k++) {
		IloNumExpr sizeInK(env);
		for(int i=k; i<nj; i++) sizeInK += sj[i] * xjh[i][k];
		for(int jcg=k+1; jcg<nj; jcg++) { // index of the current guest we're looking at
			for(int j=k+1; j<jcg; j++) { // index of the potential replacement for jcg
				IloNumExpr jguests(env);
				for(int jg=j+1; jg<nj; jg++) jguests += xjh[jg][j];

				if(pj[j] > pj[jcg]) {
					if(sj[j] >= sj[jcg]) {
						//mip_cj.add(IloIfThen(env, ((xjh[jcg][k] >= 0.9 && IloSum(xjh[j]) <= 0.1 && pj[j] <= Pk[k])), capacity - sizeInK + sj[jcg] + 1 <= sj[j]));
					} else {
						//mip_cj.add(IloIfThen(env, ((xjh[jcg][k] >= 0.9 && IloSum(xjh[j]) <= 0.1 && pj[j] <= Pk[k]) && (jguests == 0)), capacity - sizeInK + sj[jcg] + 1 <= sj[j]));
					}
				}
			}
		}
	} */
	
	
		/* find pairs of jobs that are mutually exclusive
	for(int k=0; k<nj; k++) {
		for(int j1=k+1; j1<nj; j1++) {
			for(int j2=j1+1; j2<nj; j2++) {
				if(sj[j1] + sj[j2] >= capacity - sj[k] + 1) { //
					mip_cj.add(xjh[j1][k] + xjh[j2][k] <= (1-IloSum(xjh[k])));
					mip_cj.add(xjh[j1][k] + xjh[j2][k] <= 1)2	Total size:14
Job 7:	s=6	p=92	d=0	L=(395+-251-774)=-630=-324			Pk=92	;
					IloNumVarArray sospair(env);
					sospair.add(xjh[j1][k]);
					sospair.add(xjh[j2][k]);
					mip_cj.add(IloSOS1(env, sospair));
				}
			}
		}
	}*/
	
	
/*
	cout << "Now adding static psi-3-in-2 dominance rules ..." << endl;
	for(int j1=0; j1<nj-1; j1++) {
		for(int j2=j1+1; j2<nj; j2++) {
			for(int j3=j2+1; j3<nj; j3++) {
			for(int k1=0; k1<j1-1; k1++) {
				for(int k2=k1+1; k2<j1; k2++) {
					// order now: k1, k2, j1, j2
					if(pj[j1] > pj[k1] or pj[j2] > pj[k1] or pj[j1] > pj[k2] or pj[j2] > pj[k2] or pj[j3] > pj[k1] or pj[j3] > pj[k2]) continue;
					if(capacity - sj[k1] < sj[j1] + sj[j3] or capacity - sj[k1] < sj[j2] or capacity - sj[k2] < sj[j1] or capacity - sj[k2] < sj[j2]) continue;
					IloNumExpr nsumk1(env);
					IloNumExpr nsumk2(env);
					for(int j=0; j<nj; j++) {
						if(j==j1 or j==j2) continue;
						nsumk1 += xjh[j][k1];
						nsumk2 += xjh[j][k2];
					}
					// if k1 and k2 are hosts, and j1 and j2 are in k1 and k2, and
					cout << "Adding psi-3-in-2-strict constraint" << endl;
					mip_cj_solver.addLazyConstraint( 2 * ( IloSum(xjh[k1]) + IloSum(xjh[k2]) + (2 - xjh[j1][k1] - xjh[j1][k2] - xjh[j2][k1] - xjh[j2][k2]) + (nsumk1 + nsumk2) ) >= xjh[j1][k2] + xjh[j2][k1] + xjh[j3][k2]);
				}
			}
			}
		}
	}
*/

	/* original vertical constraint*/
	for(int j=0; j<nj; j++) {
		for(int k=0; k<j; k++) {
			if(sj[k] + sj[j] - 1 >= capacity) continue;
			IloNumExpr sizeInK(env);
			for(int i=k; i<nj; i++) sizeInK += sj[i] * xjh[i][k];
			//pj[j] + IloInfinity <= Pk[k]
			// IloInfinity <= Pk[k]
		//	mip_cj.add(IloIfThen(env, (capacity-( sizeInK ) >= sj[j] && pj[j] <= Pk[k]) , xjh[j][j] <= FUZZ || xjh[k][k] <= FUZZ ));
	//		mip_cj.add(IloIfThen(env, (pj[j] + IloInfinity <= -IloInfinity - xjh[j][j] && xjksum(xjh, j, 0, j-1) <= FUZZ && xjksum(xjh,k,0,k-1) <= FUZZ ), capacity-(sizeInK ) + 1 <= sj[j]));
		}
	}